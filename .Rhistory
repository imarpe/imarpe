txt[i]
gsub("([ab])", "\\1_\\1_", "abc and ABC")
txt <- c("The", "licenses", "for", "most", "software", "are",
"designed", "to", "take", "away", "your", "freedom",
"to", "share", "and", "change", "it.",
"", "By", "contrast,", "the", "GNU", "General", "Public", "License",
"is", "intended", "to", "guarantee", "your", "freedom", "to",
"share", "and", "change", "free", "software", "--",
"to", "make", "sure", "the", "software", "is",
"free", "for", "all", "its", "users")
"[gu]"
( i <- grep("[gu]", txt) ) # indices
grep("[gu]", txt, value = TRUE)
grep("[gu]", txt, value = FALSE)
sub("[b-e]",".", txt)
"[b-e]"
?regexec
(ot <- sub("[b-e]",".", txt))
txt[ot != gsub("[b-e]",".", txt)]#- gsub does "global" substitution
txt[gsub("g","#", txt) !=
gsub("g","#", txt, ignore.case = TRUE)] # the "G" words
txt
regexpr("en", txt)
gregexpr("e", txt)
str <- "Now is the time      "
sub(" +$", "", str)  ## spaces only
sub("[[:space:]]+$", "", str) ## white space, POSIX-style
sub("\\s+$", "", str, perl = TRUE) ## PCRE-style white space
txt <- "a test of capitalizing"
gsub("(\\w)(\\w*)", "\\U\\1\\L\\2", txt, perl=TRUE)
gsub("\\b(\\w)",    "\\U\\1",       txt, perl=TRUE)
txt2 <- "useRs may fly into JFK or laGuardia"
gsub("(\\w)(\\w*)(\\w)", "\\U\\1\\E\\2\\U\\3", txt2, perl=TRUE)
sub("(\\w)(\\w*)(\\w)", "\\U\\1\\E\\2\\U\\3", txt2, perl=TRUE)
notables <- c("  Ben Franklin and Jefferson Davis",
"\tMillard Fillmore")
name.rex <- "(?<first>[[:upper:]][[:lower:]]+) (?<last>[[:upper:]][[:lower:]]+)"
(parsed <- regexpr(name.rex, notables, perl = TRUE))
gregexpr(name.rex, notables, perl = TRUE)[[2]]
parse.one <- function(res, result) {
m <- do.call(rbind, lapply(seq_along(res), function(i) {
if(result[i] == -1) return("")
st <- attr(result, "capture.start")[i, ]
substring(res[i], st, st + attr(result, "capture.length")[i, ] - 1)
}))
colnames(m) <- attr(result, "capture.names")
m
}
parse.one(notables, parsed)
require(ruisu)
kali::clearAbsences()
require(ruisu)
exampleCoords <- data.frame(lon = runif(n = 10, min = -80, max = -78),
lat = runif(n = 10, min = -14, max = -12))
exampleCoords
isopArea.assigner(dataPoints = exampleCoords)
x = isopArea.assigner(dataPoints = exampleCoords)
x
dim(x)
lrngth(x)
length(x)
plot(x)
plotIsoparalitoral(codeList = NULL, add = FALSE, old = TRUE,
plotParams = list(xlim = c(-90, -70), ylim = c(-18, -2), axes = TRUE, xlab =
NA, ylab = NA), mapParams = list(database = "world"), ...)
plotIsoparalitoral(codeList = NULL, add = FALSE, old = TRUE,
plotParams = list(xlim = c(-90, -70), ylim = c(-18, -2), axes = TRUE, xlab =
NA, ylab = NA), mapParams = list(database = "world"))
plotIsoparalitoral(codeList = NULL, add = FALSE, old = TRUE,
plotParams = list(xlim = c(-90, -75), ylim = c(-18, -2), axes = TRUE, xlab =
NA, ylab = NA), mapParams = list(database = "world"))
plotIsoparalitoral(codeList = NULL, add = FALSE, old = TRUE,
plotParams = list(xlim = c(-90, -70), ylim = c(-18, -2), axes = TRUE, xlab =
NA, ylab = NA), mapParams = list(database = "world"))
library(maps)
map("state")
grid_points(my_data,c("x","y","z"),0.5)
library(ggplot2)
library(maps)
us_states <- map_data("state")
(ggplot(aes(x=x,y=y,fill=z),data=YOUR_DATA) + geom_tile())+geom_polygon(data=us_states,aes(x=long, y=lat, group=group), colour="black", fill="white", alpha=0)
library(mapdata)
image(x=110:155, y =-40:-10, z = outer(1:45, 1:30, "+"),
xlab = "lon", ylab = "lat")
outline <- map("worldHires", plot=FALSE) # returns a list of x/y coords
xrange <- range(outline$x, na.rm=TRUE) # get bounding box
yrange <- range(outline$y, na.rm=TRUE)
xbox <- xrange + c(-2, 2)
ybox <- yrange + c(-2, 2)
polypath(c(outline$x, NA, c(xbox, rev(xbox))),
c(outline$y, NA, rep(ybox, each=2)),
col="light blue", rule="evenodd")
library(mapdata)
image(x=110:155, y =-40:-10, z = outer(1:45, 1:30, "+"),
xlab = "lon", ylab = "lat")
outline <- map("worldHires", plot=FALSE) # returns a list of x/y coords
xrange <- range(outline$x, na.rm=TRUE) # get bounding box
yrange <- range(outline$y, na.rm=TRUE)
xbox <- xrange + c(-2, 2)
ybox <- yrange + c(-2, 2)
polypath(c(outline$x, NA, c(xbox, rev(xbox))),
c(outline$y, NA, rep(ybox, each=2)),
col="light blue", rule="evenodd")
require(ruisu)
library(sp)
library(rmarkdown)
render("sp_gallery.Rmd")
?rmarkdown
library(rmarkdown)
render("sp_gallery.Rmd")
library(knitr)
purl("sp_gallery.Rmd")
demo(meuse, ask = FALSE, echo = FALSE) # loads the meuse data sets
class(meuse)
library(maptools)
library(rgdal)
nc <- readOGR(system.file("shapes/", package="maptools"), "sids")
proj4string(nc) <- CRS("+proj=longlat +datum=NAD27")
plot(meuse)
plot(meuse)
meuse.riv
x = c(2,1,4,5,3)
sort(x)
sort(x, index.return=TRUE)
x = c(2,1,4,5,3, NA)
is.na(x)
!is.na(x)
sum(!is.na(x))
diff(x)
x
sign(diff(x))
?rle
rle(sign(diff(x)))
length(rle(sign(diff(x))))
x = c(23,22,20,19,18,16,15,10)
diff(x)
sign(diff(x))
sign(diff(x))$values
?sign
rle(sign(diff(x)))$values
rle
?rle
rle(sign(diff(x)))$values
diff(x)
sign(diff(x))
rle(c(1,1,2))
rle(c(1,1,1,1,2))
rev(rep(6:10, 1:5))
x = c(23,22,20,19,18,16,15,10, 12, 13)
diff(x)
sign(diff(x))
rle(sign(diff(x)))
rle(sign(diff(x)))$values
?unlist
l.ex <- list(a = list(1:5, LETTERS[1:5]), b = "Z", c = NA)
l.ex
l.ex <- list(a = list(1:5, LETTERS[1:5]), b = "Z", c = NA)
unlist(l.ex)
unlist(l.ex)[1]
x = unlist(l.ex)
index = unlist(l.ex)
index[1]
x = c(23,22,20,19,18,16,15,10, 12, 13)
sign(diff(x))
rle(sign(diff(x)))
xs = rle(sign(diff(x)))
xs
x$lengths
xs$lengths
cumsum(xs$lengths)
?cumsum
cumsum(xs$lengths)
x =
x
x
xs
x = c(23,22,20,19,18,16,15,10, 12, 13)
x
xs=rle(sign(diff(x)))
xs
cumsum(xs)
xs$values
xs$lengths
cumsum(xs$lengths)
z = cumsum(xs$lengths)
z
nrow = cumsum(xs$lengths)
nrow
head(nrow,-1)
xs$lengths
cumsum(xs$lengths)
head(nrow,-1)
c(1,head(nrow,-1)+1)
nrow
cbind(begin=c(1,head(nrow,-1)+1),end=nrow+1)
index = cbind(begin=c(1,head(nrow,-1)+1),end=nrow+1)
index
.FUN = function(index) {
index = unlist(index)
return(index[1]:index[2])
}
index = lapply(apply(index, 1, list), .FUN)
index
xs=rle(sign(diff(x)))
xs
xs$lengths == 1
x = c(23,22,20,19,18,16,15,10, 12, 13)
xs=rle(sign(diff(x)))
xs
x = c(23,22,20,19,18,16,15,10)
rle(sign(diff(x)))
length(rle(sign(diff(x))))
length(rle(sign(diff(x)))$values)
index
rle(sign(diff(x)))
x = c(23,22,20,19,18,16,15,10)
xs=rle(sign(diff(x)))
xs
xs
xs$lengths == 1
rle(xs$lengths == 1)
xs$lengths
cumsum(xs$lengths)
x = c(23,22,20,19,18,16,15,10,12,15)
xs=rle(sign(diff(x)))
xs
xs$length == 1
rle(xs$length == 1)
l = rle(xs$length == 1)
l
cumsum(xs$lengths)
nrow   = cumsum(xs$lengths)
nrow
l$lengths
which(l$value)
cumsum(l$lengths)[which(l$value)]
x = c(23,22,20,19,18,16,15,10,12,15)
xs=rle(sign(diff(x)))
l = rle(xs$length == 1)
l
nrow   = cumsum(xs$lengths)
ind = cumsum(l$lengths)[which(l$value)]
ind
length(ind)==0
if(length(ind)==0)
return(list(x=x, y=y))
x = c(23,22,20,19,18,16,15,10,12,15)
x
xs=rle(sign(diff(x)))
xs
rle(xs$length == 1)
x = c(23,22,20,19,18,16,15,10,12,15,15)
xs=rle(sign(diff(x)))
xs
sign(diff(x))
rle(sign(diff(x)))
l = rle(xs$length == 1)
l
nrow   = cumsum(xs$lengths)
nrow
ind = cumsum(l$lengths)[which(l$value)]
ind
length(ind)==0
nrow   = cumsum(xs$lengths)
nrow
ind = cumsum(l$lengths)[which(l$value)]
ind
length(ind)==0
ind
length(ind)==0
length(ind)
ind
nrow[ind]
nrow
nrow   = cumsum(xs$lengths)
nrow
nrow   = cumsum(xs$lengths)
ind = cumsum(l$lengths)[which(l$value)]
ind
nrow
ind
which(l$value)
xs$length == 1
xs$length
xs$length == 1
l = rle(xs$length == 1)
l
rle(xs$length == 1)
xs
x = c(23,22,20,19,18,16,15,10,12,15,15,15)
xs=rle(sign(diff(x)))
xs
xs$length == 1
(xs$length == 1)
rle(xs$length == 1)
sign(diff(x))
rle(sign(diff(x)))
x = c(23,22,20,19,18,16,15,10,12,15,15)
xs=rle(sign(diff(x)))
xs
x = c(23,22,20,19,18,16,15,10,12,15,15)
xs=rle(sign(diff(x)))
xs
l = rle(xs$length == 1)
l
cumsum(xs$lengths)
nrow   = cumsum(xs$lengths)
ind = cumsum(l$lengths)[which(l$value)]
ind
length(ind)==0
ind
nrow[ind]
nrow[ind]
x[11]
out = nrow[ind] + 1
x1 = x[-out]
x
x
out
x1
x = c(23,22,20,19,18,16,15,10,12,15,15)
xs=rle(sign(diff(x)))
l = rle(xs$length == 1)
l
x = c(23,22,20,19,18,16,15,10,12,15,15)
length(x)
y = c(0, 10,15,20,25,30,50,70,120,150,200)
length(y)
yf = splinefun(y,x,method = "mono.H.FC")
x
y
yf = splinefun(y,x,method = "monoH.FC")
yf
yf
y2 = splinefun(y,x,method = "monoH.FC")
y2
range(y)
yf = splinefun(y,x,method = "monoH.FC")
rm(y2)
ry = range(y)
ry
yyf = seq(from=ry[1], to = ry[2],by=1)
yyf
dxf=yf(yyf,deriv = 1)
dxf=yf(yyf,deriv = 1)
dxf
yyf[which.max(dfx)]
dxf=yf(yyf,deriv = 1)
clina= yyf[which.max(dxf)]
clina
dxf
yyf[132]
yyf[which.max(dxf)]
?splinefun
require(stats)
require(graphics)
op <- par(mfrow = c(2,1), mgp = c(2,.8,0), mar = 0.1+c(3,3,3,1))
n <- 9
x <- 1:n
y <- rnorm(n)
n
x
y
plot(x, y, main = paste("spline[fun](.) through", n, "points"))
lines(spline(x, y))
lines(spline(x, y, n = 201), col = 2)
y <- (x-6)^2
y
plot(x, y, main = paste("spline[fun](.) through", n, "points"))
lines(spline(x, y))
lines(spline(x, y, n = 201), col = 2)
spline(x, y)
?splinefun
n <- 20
set.seed(11)
x. <- sort(runif(n)) ; y. <- cumsum(abs(rnorm(n)))
x.
y.
plot(x., y.)
splinefun(x., y.)
splinefun(x., y.)(x)
curve(splinefun(x., y.)(x), add = TRUE, col = 2, n = 1001)
(x)
rm(ls=list())
rm(ls=TRUE)
rm()
ls()
rm(x)
rm(x.)
rm(list=ls())
x
x.
n <- 20
set.seed(11)
x. <- sort(runif(n)) ; y. <- cumsum(abs(rnorm(n)))
plot(x., y.)
x
n <- 20
set.seed(11)
x. <- sort(runif(n)) ; y. <- cumsum(abs(rnorm(n)))
plot(x., y.)
curve(splinefun(x., y.)(x), add = TRUE, col = 2, n = 1001)
curve(splinefun(x., y., method = "monoH.FC")(x), add = TRUE, col = 3, n = 1001)
install.packages("H:/Criscely/Documentos/Maestria/Tesis/paquetes/kali_0.5.zip", repos = NULL, type = "win.binary")
remove.packages("abind")
install.packages("abind")
remove.packages("abind")
install.packages("abind")
install.packages("D:/criscely/documentos/Code/Developing/imarpe/package/new_packages/repSeg/RepSeg-master.zip", repos = NULL, type = "win.binary")
require(`RepSeg-master`)
setwd("D:/Criscely/Documentos/Code/Developing/imarpe/package/new_code/imarpe")
devtools::load_all(".")
library(imarpe)
devtools::load_all(".")
library(imarpe)
devtools::load_all(".")
library(imarpe)
devtools::load_all(".")
library(imarpe)
devtools::load_all(".")
library(imarpe)
devtools::load_all(".")
library(imarpe)
devtools::load_all(".")
library(imarpe)
devtools::load_all(".")
library(imarpe)
devtools::load_all(".")
library(imarpe)
devtools::load_all(".")
library(imarpe)
setwd("D:/criscely/documentos/Code/Developing/imarpe/package/new_code/imarpe/R")
devtools::load_all(".")
library(imarpe)
devtools::load_all(".")
library(imarpe)
setwd("D:/criscely/documentos/Code/Developing/imarpe/package/new_code/imarpe/R")
devtools::load_all(".")
library(imarpe)
devtools::load_all(".")
library(imarpe)
library(imarpe)
library(imarpe)
library(imarpe)
library(imarpe)
library(imarpe)
devtools::load_all(".")
devtools::load_all(".")
library(imarpe)
remove.packages("rmarkdown")
install.packages("rmarkdown")
require(rmarkdown)
library(imarpe)
library(imarpe)
devtools::load_all(".")
library(imarpe)
devtools::load_all(".")
devtools::load_all(".")
library(imarpe)
library(imarpe)
devtools::load_all(".")
library(imarpe)
library(imarpe)
devtools::load_all(".")
library(imarpe)
devtools::load_all(".")
library(imarpe)
devtools::load_all(".")
library(imarpe)
library(imarpe)
library(imarpe)
library(imarpe)
library(imarpe)
library(imarpe)
library(imarpe)
library(imarpe)
library(imarpe)
library(imarpe)
library(imarpe)
library(imarpe)
library(imarpe)
library(imarpe)
library(imarpe)
library(imarpe)
library(imarpe)
library(imarpe)
library(imarpe)
library(imarpe)
library(imarpe)
library(imarpe)
library(imarpe)
library(imarpe)
library(imarpe)
library(imarpe)
library(imarpe)
library(imarpe)
library(imarpe)
library(imarpe)
devtools::load_all(".")
library(imarpe)
library(imarpe)
library(imarpe)
library(imarpe)
library(imarpe)
library(imarpe)
library(imarpe)
library(imarpe)
library(imarpe)
library(imarpe)
library(imarpe)
library(imarpe)
library(imarpe)
