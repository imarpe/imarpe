#Obtencion de vectores captura, esfuerzo o cpue -> nombre: dataTable
if(varType == "cpue"){ #cpue
dataTable = dataBase
if(efforType != "viaje"){
dataTable$cpue = dataTable[,"captura"] / dataTable[, efforType]
dataTable = aggregate(cpue ~ anho + mes + tipo_flota, data = dataTable, FUN = cpueFun)
} else {
effort = count(dataTable, vars = c("anho", "mes", "dia", "tipo_flota", "puerto"))
catch  = aggregate(captura ~ anho + mes + dia + tipo_flota + puerto, data = dataTable, FUN = sum)
dataTable = merge(effort, catch, by = c("anho", "mes", "dia", "tipo_flota", "puerto"))
dataTable$cpue = dataTable$captura / dataTable$freq
dataTable = aggregate(cpue ~ anho + mes + tipo_flota, data = dataTable, FUN = cpueFun)
}
} else { #desembarque y esfuerzo
if(varType == "landing"){ #desembarque
dataTable = aggregate(captura ~ anho + mes + tipo_flota, data = dataBase, FUN = landingFun)
} else { #esfuerzo
if(efforType == "viaje"){
dataTable = count(dataBase, vars = c("anho", "mes", "dia", "tipo_flota", "puerto"))
dataTable = aggregate(freq ~ anho + mes + tipo_flota, dataTable, FUN = effortFun)
colnames(dataTable)[4] = "esfuerzo"
} else {
dataTable = aggregate(as.formula(paste0(efforType, " ~ anho + mes + tipo_flota")), data = dataBase, FUN = effortFun)
}
}
}
#Editando la nueva base de datos en relacion al tipo de flota
dataTable$tipo_flota = capitalizeFirstLetter(dataTable$tipo_flota)
dataTable = reshape(dataTable, idvar = c("anho", "mes"), timevar = "tipo_flota", direction = "wide")
dataTable[is.na(dataTable)] = 0 ; rownames(dataTable) = NULL
#Editanto la nueva base de datos en relacion a las fechas
datesVector   = as.Date(paste(dataTable$anho, dataTable$mes,1, sep = "-"), format = "%Y-%m-%d")
newOrderDates = datesVector[order(datesVector)]
dataTable = dataTable[match(newOrderDates, datesVector), ]; rownames(dataTable) = NULL
datesVector = paste(engToSpa(month2word(dataTable$mes)), dataTable$anho, sep=" ")
rownames(dataTable) = datesVector
dataTable$anho = NULL
dataTable$mes  = NULL
colnames(dataTable) = unlist(lapply(strsplit(colnames(dataTable), split = "\\."), "[[", 2))
return(dataTable)
}
# Function to use in the .getLandingsData function (landing class)
.readSegFile = function(file){
output = file
#output = read.csv(file = file, ...)
monthVector = tolower(substr(output$month, 1, 3))
for(i in seq_along(month.abb_spanish)){
index = which(is.element(monthVector, substr(tolower(month.abb_spanish[i]), 1, 3)))
if(length(index) < 1){next}
else{output$month[index] = rep(tolower(month.abb[i]), length(index))}
}
output$month = capitalizeFirstLetter(output$month)
dateVector   = with(output, as.Date(paste(year, word2month(month), day, sep = "-")))
actualYear   = sort(unique(as.numeric(substr(as.character(dateVector), 1, 4))))
dateRange    = as.Date(apply(.getCalendar(actualYear), 1, function(x) paste(x, collapse = "-")))
dateRange    = dateRange[!is.element(dateRange, unique(dateVector))]
newData = as.data.frame(mat.or.vec(nr = length(dateRange), nc = ncol(output)))
colnames(newData) = colnames(output)
newData$year  = as.numeric(substr(dateRange, 1, 4))
newData$month = month2word(substr(dateRange, 6, 7))
newData$day   = as.numeric(substr(dateRange, 9, 10))
output = rbind.data.frame(output, newData)
output = output[order(output$year, word2month(output$month), output$day),]
rownames(output) = NULL #
return(output)
}
# Function to split the data according the time
.trimData = function(x, start, end) {
if(is.null(start) & is.null(end)){
months = tolower(x$month)
vectorDates = as.Date(paste(x$year,match(months, tolower(month.abb)), x$day, sep="-"), format = "%Y-%m-%d")
start = min(vectorDates)
end   = max(vectorDates)
} else{
months = tolower(x$month)
start  = start
end    = end
}
datesVector = as.Date(paste(x$year,match(months, tolower(month.abb)), x$day, sep="-"), format = "%Y-%m-%d")
x = data.frame(date = datesVector, x)
x = subset(x, x$date >= as.Date(start) & x$date <= as.Date(end))
x$date = NULL
return(x)
}
# Function to get data by regions (regionNC and regionS)
.getRegionData = function(x){
dataBase = x$data
dataBase = melt(dataBase, id.vars=c("year", "month", "day"))
portData = getPort(as.vector(as.character(dataBase$variable)))
dataBase$port   = portData$data$name
dataBase$region = portData$data$area
dataNC = dataBase[dataBase$region %in% c("Norte", "Centro"), ]
dataS  = dataBase[dataBase$region %in% "Sur", ]
#Ordering data from the NC region
dataNC = aggregate(value ~ year + month + day, dataNC, sum)
dataNC = dataNC[order(dataNC$year, word2month(dataNC$month), dataNC$day),]
#Ordering data from the S region
dataS = aggregate(value ~ year + month + day, dataS, sum)
dataS = dataS[order(dataS$year, word2month(dataS$month), dataS$day),]
#dataNC = .trimData(x = dataNC, start = start, end = end) ; rownames(dataNC) = NULL
#dataS  = .trimData(x = dataS, start = start, end = end) ; rownames(dataS) = NULL
output = list(regionNC = dataNC, regionS = dataS, varType = x$info$varType, efforType = x$info$efforType)
return(output)
}
# Function to plot the regions (NC and S)
.plotRegion = function(x, region, byAxis2="default", milesTons=TRUE, textAxis2, textAxis4, cexLab=1.2,
daysToPlot, cexAxis24 = 1.1, cexAxis1 = 0.9, cexLegend = 1){
if(region == "NC"){dataBase = x$regionNC} else {dataBase = x$regionS}
dataBase$dates = paste(sapply(dataBase$day, function(x) paste0(ifelse(x < 10, 0, ""), x)),
sapply(word2month(dataBase$month), function(x) paste0(ifelse(x < 10, 0, ""), x)),
dataBase$year, sep = "/")
xValues = as.Date(paste(dataBase$day, word2month(dataBase$month), dataBase$year, sep="/"), format = "%d/%m/%Y")
yValues = dataBase$value
xLim    = range(xValues)
maxY1 = max(yValues, na.rm = TRUE)
yLim1 = c(0, maxY1)
maxY2 = sum(yValues, na.rm = TRUE)
yLim2 = c(0, maxY2)
#plot
par(oma = c(4, 1, 1, 1))
par(mar = c(5, 5, 1, 5), yaxs = "i")
plot(1, 1, pch = NA, axes = FALSE, xlim = xLim, ylim = yLim1, xlab = NA, ylab = NA)
vectorYear = unique(dataBase$year) #code for the polygon
for(j in seq_along(vectorYear)){
for(i in seq(2, 12, 2)){
tempDates = seq(from = as.Date(paste(vectorYear[j], i, "1", sep = "-")), by = "mon", length.out = 2) + c(-1, 1)
polygon(x = c(tempDates, rev(tempDates)), y = c(-40, -40, 10e7, 10e7), border = NA, col = "gray90") }}
lines(xValues, yValues, type = "o", pch = 19)
lines(xValues, cumsum(yValues)/yLim2[2]*yLim1[2], lty = "dashed")
abline(h = mean(yValues), lty = "dotted", lwd = 2, col = "red")
#Axis 2 and 4
if(byAxis2 == "default"){atAxis2 = pretty(dataBase$value)} else {atAxis2 = seq(0, maxY1, byAxis2)}
axis(side = 2, at = atAxis2, las = 2, cex.axis=cexAxis24)
yLabs2 = seq(from = 0, to = maxY2, length.out = 10) / ifelse(isTRUE(milesTons), 1e3, 1e6)
axis(side = 4, at = seq(from = 0, to = maxY1, length.out = length(yLabs2)), labels = round(yLabs2,2), las = 2, cex.axis = cexAxis24)
box()
if(is.null(textAxis2) & is.null(textAxis4)){
if(x$varType == "landing"){
textAxis2="Desembarque diario (t)" ; textAxis4=expression(paste("Desembarque acumulado ( ", 10^3, " t)"))}
if(x$varType == "effort"){
efforType = x$efforType
if(efforType == "viaje"){
textAxis2 = "Esfuerzo diario (viajes)" ; textAxis4 = expression(paste("Esfuerzo acumulado ( ", 10^3, " viajes)")) }
if(efforType == "capacidad_bodega"){
textAxis2 = expression(paste("Esfuerzo diario ( ", m^3, ")")) ; textAxis4 = expression(paste("Esfuerzo acumulado ( ", 10^3, m^3, ")")) }
if(efforType == "anzuelos"){
textAxis2 = "Esfuerzo diario (anzuelos)" ; textAxis4 = expression(paste("Esfuerzo acumulado ( ", 10^3, " anzuelos)")) }
if(efforType == "embarcaciones"){
textAxis2 = "Esfuerzo diario (embarcaciones)" ; textAxis4 = expression(paste("Esfuerzo acumulado ( ", 10^3, " embarcaciones)")) }}
if(x$varType == "cpue"){
efforType = x$efforType
if(efforType == "viaje"){
textAxis2 = expression(paste("Cpue diario ("," t ", viajes^-1,")")) ; textAxis4 = expression(paste("Cpue acumulado ("," t ", viajes^-1, 10^3, ")")) }
if(efforType == "capacidad_bodega"){
textAxis2 = expression(paste("Cpue diario ("," t ", m^-3, ")")) ; textAxis4 = expression(paste("Cpue acumulado ("," t ", m^-3, 10^3, ")")) }
if(efforType == "anzuelos"){
textAxis2 = expression(paste("Cpue diario ("," t ", anzuelos^-1, ")")) ; textAxis4 = expression(paste("Cpue acumulado ("," t ", anzuelos^-1, 10^3, ")")) }
if(efforType == "embarcaciones"){
textAxis2 = expression(paste("Cpue diario ("," t ", embarcaciones^-1, ")")) ; textAxis4 = expression(paste("Cpue acumulado ("," t ", embarcaciones^-1, 10^3, ")")) }}
} else {
textAxis2 = textAxis2
textAxis4 = textAxis4}
mtext(text = textAxis2, side = 2, line = 4, cex = cexLab)
mtext(text = textAxis4, side = 4, line = 4, cex = cexLab)
#Axis1
if(unique(daysToPlot %in% "all")){index = dataBase$day} else {index = which(dataBase$day %in% daysToPlot)}
xLabs = dataBase$dates
index = xLabs[index]
xLabs[!xLabs %in% index] = NA
axis(side = 1, at = xValues, labels = xLabs, las = 2, cex.axis = cexAxis1)
#legend
par(fig = c(0, 1, 0, 1), oma = c(0, 0, 0, 0), mar = c(0, 0, 0, 0), new = TRUE)
plot(0, 0, type = "n", bty = "n", xaxt = "n", yaxt = "n")
legend("bottom", c("Diario", "Acumulado", "Promedio"), xpd = TRUE,
horiz = TRUE, inset = c(0, 0), bty = "n",text.width=c(0.25,0.25,0.25),
lty = c("solid", "dashed", "dotted"), pch = c(19, NA, NA),
col = c("black", "black", "red"), lwd = c(1, 1, 2), cex = cexLegend)
return(invisible())
}
# plot.fishery
print.cpue = function(x, language="spanish"){
if(language == "english"){
cat("Data from: ", sQuote(x$info$file), "\n", sep="")
cat("Number of records: ", x$info$records, "\n", sep="")
cat("Number of months of data: ", x$info$months, "\n", sep="")
cat("Number of years of data: ", x$info$years, "\n", sep="")
cat("Number of ports of data: ", x$info$ports, "\n", sep="")
cat("Analyzed species: ", x$info$sp, "\n", sep="")
cat("Effort type: ", x$info$efforType, "\n", sep="")
} else {
cat("Datos de : ", sQuote(x$info$file), "\n", sep="")
cat("Numero de registros: ", x$info$records, "\n", sep="")
cat("Numero de meses de la data: ", x$info$months, "\n", sep="")
cat("Numero de ahnos de la data: ", x$info$years, "\n", sep="")
cat("Numero de puertos: ", x$info$ports, "\n", sep="")
cat("Especie analizada: ", x$info$sp, "\n", sep="")
cat("Tipo de esfuerzo: ", x$info$efforType, "\n", sep="")
}
return(invisible())
}
summary.cpue = function(object, language = "spanish"){
object2 = object
if(language=="spanish"){
object2$data$month = engToSpa(object2$data$month)
colnames(object2$data) = c("anho", "mes", "dia", "cpue")
object2$dataPortDay$month = engToSpa(object2$dataPortDay$month)
colnames(object2$dataPortDay)[1:3] = c("anho", "mes", "dia")
} else{
object2$data$month = object2$data$month
colnames(object2$data) = c("year", "month", "day", "cpue")
}
output = list()
output$portDay =  object2$dataPortDay
output$day     =  object2$data
output$port    =  object2$dataPort
output$months  =  .getMonth.cpue(object = object, language = language)
output$years   =  .getYear.cpue(object = object)
class(output) = "summary.cpue"
return(output)
}
print.summary.cpue = function(x, language = "spanish"){
x2 = x
class(x2) = 'cpue'
if(language == "english"){
cat("\nCPUE by port and day (non-zero only):\n\n") ; print(x$portDay[x$portDay[,1]>0, ,drop=FALSE])
cat("\nCPUE by day:\n\n") ; print(x$day)
cat("\nCPUE by port (non-zero only):\n\n") ; print(x$port[x$port[,1]>0, ,drop=FALSE])
cat("\nMonthly CPUE:\n\n") ; print(t(x$months))
cat("\nAnnual CPUE:\n\n") ; print(x$years)}
else {
cat("\nCPUE por puerto y dia (solo positivos):\n\n") ; print(x$portDay[x$portDay[,1]>0, ,drop=FALSE])
cat("\nCPUE por dia:\n\n") ; print(x$day)
cat("\nCPUE por puerto (non-zero only):\n\n") ; print(x$port[x$port[,1]>0, ,drop=FALSE])
cat("\nCPUE mensual:\n\n") ; print(t(x$months))
cat("\nCPUE anual:\n\n") ; print(x$years)}
return(invisible())
}
plot.cpue = function(x, language, ploType = NULL, daysToPlot = c(1,8,15,22), textAxis2 = NULL, textAxis4 = NULL, ...){
if(is.null(ploType)) ploType = "plotDaily"
if(ploType %in% c("plotNC", "plotS")){
x2 = list()
x2$data = x$dataPortDay
x2$info$varType = x$info$varType
x2$info$efforType = x$info$efforType
dataRegion = .getRegionData(x = x2)}
switch(ploType,
plotDaily   = .plotDays.cpue(x=x, language=language, daysToPlot = daysToPlot,
textAxis2 = textAxis2, textAxis4 = textAxis4, ...),
plotMonthly = .plotMonths.cpue(x=x, language=language, ...),
plotYearly  = .plotYears.cpue(x=x, language=language, ...),
plotNC      = .plotRegion(x = dataRegion, region = "NC", daysToPlot = daysToPlot,
textAxis2 = textAxis2, textAxis4 = textAxis4, ...),
plotS       = .plotRegion(x = dataRegion, region = "S", daysToPlot = daysToPlot,
textAxis2 = textAxis2, textAxis4 = textAxis4, ...))
return(invisible())
}
report = function(x, ...) {
UseMethod("report")
}
report.cpue = function(x, format = "latex", tangle=FALSE, output = NULL, daysToPlot = c(1,8,15,22),
textAxis2 = NULL, textAxis4 = NULL){
if(is.null(output)) output = getwd()
outputName = deparse(substitute(x))
skeleton = system.file("reports", "cpue-report.Rmd", package = "imarpe")
if(isTRUE(tangle)) {
knit(skeleton, tangle=TRUE)
f1 = gsub(pattern = ".Rmd", replacement = "\\.R", skeleton)
file.rename(from=basename(f1), to=paste0(outputName, ".R"))
}
outputFile = paste0(outputName, "_output.pdf")
render(skeleton, c("pdf_document"), output_file=outputFile, output_dir=output)
if(isTRUE(open)) shell.exec(outputFile)
return(invisible(file.path(output, outputFile)))
}
# Internal functions for the class cpue -----------------------------------
#Funcion para obtener la data para la captura por unidad de esfuerzo (CPUE)
.getCPUEData = function(x, fileName, fleet, toTons, sp, efforType, start, end, port, varType){
fleeTable = fleet
dataBase  = .readSegFile(file = x)
dataBase[is.na(dataBase)] = 0
#corte en el tiempo
dataBase = .trimData(x = dataBase, start = start, end = end)
#corte por puertos
vectorPorts = colsplit(string = names(dataBase)[-c(1:3)], pattern="_", names=c("part1", "part2"))[,1]
if(is.null(port)){dataBase = dataBase
} else {dataBase = dataBase[, c(1:3, c(which(vectorPorts == port)+3))]}
baseCatch  = dataBase[seq(4, length(colnames(dataBase)), by = 2)]/ifelse(isTRUE(toTons), 1000, 1)
baseEffort = dataBase[seq(5, length(colnames(dataBase)), by = 2)]
baseCpue   = baseCatch / baseEffort ; baseCpue[is.na(baseCpue)] = 0
#CPUE total (promedios sobre los puertos)
cpueTotal = data.frame(dataBase[1:3], cpue = rowMeans(baseCpue))
#CPUE by port and by day
cpuePortDay = baseCpue
namesPorts = colsplit(string = names(cpuePortDay), pattern="_", names=c("part1", "part2"))[,1]
colnames(cpuePortDay) = capitalize(namesPorts)
cpuePortDay = data.frame(dataBase[1:3], cpuePortDay)
#CPUE by port (promedio sobre todo el tiempo)
cpuePort = data.frame(colMeans(baseCpue))
rownames(cpuePort) = capitalize(namesPorts)
colnames(cpuePort) = ("Cpue")
ports = rownames(cpuePort)
portData = getPort(myPorts = ports)
rownames(cpuePort) = portData$data$name
cpuePort$lat = portData$data$lat
cpuePort = cpuePort[with(cpuePort, order(cpuePort$lat, decreasing = TRUE)), ]
cpuePort$lat = NULL
#Output
info = list(file        = fileName,
records     = nrow(cpueTotal),
months      = length(rle(cpueTotal$month)$values),
years       = length(unique(cpueTotal$year)),
ports       = length(rownames(cpuePort)),
sp          = sp,
varType     = varType,
efforType   = efforType)
output = list(data = cpueTotal, dataPortDay = cpuePortDay, dataPort = cpuePort,
info = info, fleeTable = fleeTable, efforType)
class(output) = "cpue"
return(output)
}
#Funcion para obtener los cpues promedios por meses
.getMonth.cpue = function (object, language){
dataBase = object$data
dataTable = tapply(dataBase[,4], list(dataBase[,2], dataBase[,1]), mean, na.remove=FALSE)
dataTable[is.na(dataTable)] = 0
years = colnames(dataTable)
#order month (by default those are in english)
monthsTable   = row.names(dataTable)
vectorMonths  = month.abb
sortMonth   = sort(match(monthsTable, vectorMonths), decreasing = FALSE)
order       = vectorMonths[sortMonth]
dataTable = dataTable[order, ]
dataTable = as.data.frame(dataTable)
colnames(dataTable) = unique(years)
if(language == "english"){
rownames(dataTable) = month.abb[sortMonth]
colnames(dataTable) = years
} else {
rownames(dataTable) = engToSpa(month.abb[sortMonth])
colnames(dataTable) = years
}
dataTable[is.na(dataTable)] = 0
return(dataTable)
}
#Funcion para obtener los cpues totales por anhos
.getYear.cpue = function(object){
dataBase    = object$data
vectorYears = unique(dataBase[,1])
dataTable  = tapply(dataBase[,4], list(dataBase[,1]), mean, na.remove=FALSE)
dataTable  = data.frame(dataTable)
colnames(dataTable) = "Cpue"
return(dataTable)
}
#GRAFICAS
#Funcion para plotear el cpue diario
.plotDays.cpue = function(x, main = NULL, xlab = NULL, ylab = NULL, language, col = "blue",
daysToPlot, cex.axis = 0.8, cex.names=0.7, cex.main  = 1, ...){
dataBase = x$data
if(unique(daysToPlot %in% "all")){
vectorDays = paste0(as.character(dataBase[,3]),"-", capitalize(as.character(dataBase[,2])))
} else {
vectorDays = paste0(as.character(dataBase[,3]),"-", capitalize(as.character(dataBase[,2])))
daysToPlot = which(as.numeric(dataBase[,3]) %in% daysToPlot)
daysToPlot = vectorDays[daysToPlot]
vectorDays[! vectorDays %in% daysToPlot] = NA
}
if(is.null(main)){
if(language == "english"){main = "Daily cpue"} else {main = "Cpue diario"}}
efforType  = x$info$efforType
if(is.null(ylab)){
if(efforType == "viaje") {
if(language == "spanish") {
ylab = expression(paste("Cpue (", "t . ", viajes^-1, ")"))} else {ylab = expression(paste("Cpue (", "t . ", travels^-1, ")")) }}
if(efforType == "capacidad_bodega") {
if(language == "spanish") {
ylab = expression(paste("Cpue (", "t . ", m^-3, ")"))}  else {ylab = expression(paste("Cpue (", "t . ", m^-3, ")")) }}
if(efforType == "anzuelos") {
if(language == "spanish") {
ylab = expression(paste("Cpue (", "t . ", anzuelos^-1, ")")) } else {ylab = expression(paste("Cpue (", "t . ", "fish-", hook^-1, ")")) }}
if(efforType == "embarcaciones") {
if(language == "spanish") {
ylab = expression(paste("Cpue (", "t . ", embarcaciones^-1, ")")) } else {ylab = expression(paste("Cpue (", "t . ", boats^-1, ")")) }}}
par(mar = c(4,4.5, 2, 0.5))
barplot(dataBase$cpue, main=main, xlab=xlab, ylab=ylab, col=col, names.arg = FALSE,
ylim=c(0,max(dataBase$cpue)*1.2), cex.names=cex.names, axes=FALSE, cex.main = cex.main, ...)
AxisDate = seq(0.7, by=1.2, length.out=length(vectorDays))
NonNa =! is.na(vectorDays)
axis(1, at=AxisDate[NonNa], labels=vectorDays[NonNa], las=2, cex.axis=cex.axis)
axis(2, las=2, cex.axis=cex.axis)
box()
return(invisible())
}
#Funcion para plotear el cpue mensual
.plotMonths.cpue = function(x, main=NULL, xlab=NULL, ylab=NULL, language, col = "blue",
cex.axis = 0.8, cex.names=0.7, cex.main = 1, ...){
dataBase = .getMonth.cpue(object = x, language = language)
vectorYears = as.numeric(colnames(dataBase))
monthPlot = as.vector(as.matrix(dataBase[, colnames(dataBase)]))
monthPlot = monthPlot[!is.na(monthPlot)]
namesMonthPlot = capitalize(rep(rownames(dataBase), length.out = length(monthPlot)))
if(is.null(main)){
if(language == "english"){main = "Montly Cpue"} else {main = "Cpue mensual"}}
efforType = x$info$efforType
if(is.null(ylab)){
if(efforType == "viaje") {
if(language == "spanish") {
ylab = expression(paste("Cpue (", "t . ", viajes^-1, ")"))} else {ylab = expression(paste("Cpue (", "t . ", travels^-1, ")")) }}
if(efforType == "capacidad_bodega") {
if(language == "spanish") {
ylab = expression(paste("Cpue (", "t . ", m^-3, ")"))}  else {ylab = expression(paste("Cpue (", "t . ", m^-3, ")")) }}
if(efforType == "anzuelos") {
if(language == "spanish") {
ylab = expression(paste("Cpue (", "t . ", anzuelos^-1, ")")) } else {ylab = expression(paste("Cpue (", "t . ", "fish-", hook^-1, ")")) }}
if(efforType == "embarcaciones") {
if(language == "spanish") {
ylab = expression(paste("Cpue (", "t . ", embarcaciones^-1, ")")) } else {ylab = expression(paste("Cpue (", "t . ", boats^-1, ")")) }}}
par(mar = c(4, 4.5, 2, 0.5))
barplot(monthPlot, main=main, xlab=xlab, ylab=ylab, col=col, names.arg=FALSE,
ylim=c(0, max(monthPlot)*1.2), cex.names=cex.names, axes=FALSE, cex.main = cex.main, ...)
axis(1, at=seq(0.7, by=1.2, length.out=length(monthPlot)), labels=namesMonthPlot,
las=1, cex.axis=cex.axis, line=0)
axis(1, at=seq(0.7,by=1.2, length.out=length(monthPlot)),
labels=rep(vectorYears,each=12)[1:length(monthPlot)], las=1, cex.axis=cex.axis, line=1, tick=FALSE)
axis(2, las=2, cex.axis=cex.axis)
box()
return(invisible())
}
#Funcion para plotear el cpue anual
.plotYears.cpue = function(x, main=NULL, xlab=NULL, ylab=NULL, language, col = "blue",
cex.axis = 0.8, cex.names=0.7, cex.main = 1, ...){
dataBase = .getYear.cpue(object = x)
vectorYears = as.numeric(rownames(dataBase))
if(is.null(main)){
if(language == "english"){main = "Yearly cpue"} else {main = "Cpue anual"}}
efforType  = x$info$efforType
if(is.null(ylab)){
if(efforType == "viaje") {
if(language == "spanish") {
ylab = expression(paste("Cpue (", "t . ", viajes^-1, ")"))} else {ylab = expression(paste("Cpue (", "t . ", travels^-1, ")")) }}
if(efforType == "capacidad_bodega") {
if(language == "spanish") {
ylab = expression(paste("Cpue (", "t . ", m^-3, ")"))}  else {ylab = expression(paste("Cpue (", "t . ", m^-3, ")")) }}
if(efforType == "anzuelos") {
if(language == "spanish") {
ylab = expression(paste("Cpue (", "t . ", anzuelos^-1, ")")) } else {ylab = expression(paste("Cpue (", "t . ", "fish-", hook^-1, ")")) }}
if(efforType == "embarcaciones") {
if(language == "spanish") {
ylab = expression(paste("Cpue (", "t . ", embarcaciones^-1, ")")) } else {ylab = expression(paste("Cpue (", "t . ", boats^-1, ")")) }}}
par(mar = c(2.5, 4.5, 2, 0.5))
barplot(dataBase$Cpue, main=main, xlab=xlab, ylab=ylab, col=col, names.arg=FALSE,
ylim=c(0,max(dataBase)*1.2), cex.names=cex.names, axes=FALSE, cex.main = cex.main, ...)
axis(1, at=seq(0.7, by=1.2, length.out=length(vectorYears)), labels=vectorYears, las=1,
cex.axis=cex.axis)
axis(2, las=2, cex.axis=cex.axis)
box()
return(invisible())
}
plot(cpue1, language = "spanish", ploType = "plotNC")
plot(cpue1, language = "spanish", ploType = "plotNC", daysToPlot = "1", textAxis2 = "X", textAxis4 = "XX")
library(imarpe)
library(imarpe)
library(imarpe)
library(imarpe)
load("data/portData.RData")
View(portData)
View(portData)
rm(list = ls())
library(imarpe)
library(imarpe)
library(imarpe)
library(imarpe)
library(imarpe)
library(imarpe)
library(imarpe)
library(imarpe)
library(imarpe)
library(imarpe)
library(imarpe)
library(imarpe)
library(imarpe)
library(imarpe)
library(imarpe)
library(imarpe)
library(imarpe)
library(imarpe)
library(imarpe)
library(imarpe)
devtools::load_all(".")
library(imarpe)
library(imarpe)
library(imarpe)
library(imarpe)
library(imarpe)
library(imarpe)
library(imarpe)
42
library(imarpe)
library(imarpe)
library(imarpe)
library(imarpe)
library(imarpe)
library(imarpe)
library(imarpe)
library(imarpe)
library(imarpe)
library(imarpe)
library(imarpe)
library(imarpe)
library(imarpe)
library(imarpe)
library(imarpe)
library(imarpe)
